{
  "title": "A gentle guide to pagination in GraphQL",
  "description": "Pagination is a common requirement in web applications. In this post, we will learn how to implement pagination in GraphQL.",
  "tags": [
    "React",
    "Typescript",
    "Tutorial"
  ],
  "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
  "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
  "postId": "dynamic-routing",
  "body": {
    "raw": "\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n## Main Heading 01\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\n//https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n### SubHeading 01\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n## Main Heading 02\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\n//https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n### SubHeading 02\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\nGo back [Home](/).\n",
    "code": "var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var u=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),w=(a,e)=>{for(var t in e)r(a,t,{get:e[t],enumerable:!0})},l=(a,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(a,i)&&i!==t&&r(a,i,{get:()=>e[i],enumerable:!(o=g(e,i))||o.enumerable});return a};var f=(a,e,t)=>(t=a!=null?c(m(a)):{},l(e||!a||!a.__esModule?r(t,\"default\",{value:a,enumerable:!0}):t,a)),y=a=>l(r({},\"__esModule\",{value:!0}),a);var d=u((k,s)=>{s.exports=_jsx_runtime});var x={};w(x,{default:()=>I,frontmatter:()=>D});var n=f(d()),D={title:\"A gentle guide to pagination in GraphQL\",publishedAt:\"2021-12-18\",description:\"Pagination is a common requirement in web applications. In this post, we will learn how to implement pagination in GraphQL.\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"dynamic-routing\"};function h(a){let e=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"main-heading-01\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#main-heading-01\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Main Heading 01\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"//\",(0,n.jsx)(e.a,{href:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\",children:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"subheading-01\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#subheading-01\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"SubHeading 01\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"main-heading-02\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#main-heading-02\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Main Heading 02\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"//\",(0,n.jsx)(e.a,{href:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\",children:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"subheading-02\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#subheading-02\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"SubHeading 02\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go back \",(0,n.jsx)(e.a,{href:\"/\",children:\"Home\"}),\".\"]})]})}function v(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(h,a)})):h(a)}var I=v;return y(x);})();\n;return Component;"
  },
  "_id": "a-gentle-guide-to-pagination-in-graphql.mdx",
  "_raw": {
    "sourceFilePath": "a-gentle-guide-to-pagination-in-graphql.mdx",
    "sourceFileName": "a-gentle-guide-to-pagination-in-graphql.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "a-gentle-guide-to-pagination-in-graphql"
  },
  "type": "Post",
  "publishedAt": "2022-12-24T08:00:29.543Z",
  "lastUpdatedAt": "2022-12-24T08:00:29.543Z",
  "readingTime": {
    "text": "4 min read",
    "minutes": 3.73,
    "time": 223800,
    "words": 746
  },
  "headings": [
    {
      "id": "main-heading-01",
      "content": "Main Heading 01",
      "link": "#main-heading-01",
      "level": 2
    },
    {
      "id": "subheading-01",
      "content": "SubHeading 01",
      "link": "#subheading-01",
      "level": 3
    },
    {
      "id": "main-heading-02",
      "content": "Main Heading 02",
      "link": "#main-heading-02",
      "level": 2
    },
    {
      "id": "subheading-02",
      "content": "SubHeading 02",
      "link": "#subheading-02",
      "level": 3
    }
  ],
  "slug": "a-gentle-guide-to-pagination-in-graphql"
}