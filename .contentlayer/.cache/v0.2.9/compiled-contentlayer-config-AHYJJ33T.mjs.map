{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/api.ts", "../../../lib/mdx-config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport readingTime from \"reading-time\";\n\nimport { getHeadings } from \"./lib/api\";\nimport { mdxOptions } from \"./lib/mdx-config\";\n\nconst ReadingTime = defineNestedType(() => ({\n  name: \"readingTime\",\n  fields: {\n    title: {\n      type: \"string\",\n    },\n    text: {\n      type: \"string\",\n    },\n    minutes: {\n      type: \"number\",\n    },\n    time: {\n      type: \"number\",\n    },\n    words: {\n      type: \"number\",\n    },\n  },\n}));\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    publishedAt: { type: \"string\", required: true },\n    description: { type: \"string\", required: true },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n    },\n    ogImage: { type: \"string\" },\n    thumbnail: { type: \"string\" },\n    postId: { type: \"string\" },\n  },\n  computedFields: {\n    readingTime: {\n      type: \"json\",\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n    headings: {\n      type: \"nested\",\n      of: ReadingTime,\n      resolve: (doc) => getHeadings(doc.body.raw),\n    },\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(\".mdx\", \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Post],\n  mdx: {\n    ...mdxOptions,\n  },\n});\n", "import fs from \"fs\";\nimport matter from \"gray-matter\";\nimport path, { join } from \"path\";\n\n// POSTS_PATH is useful when you want to get the path to a specific file\nexport const POSTS_PATH = path.join(process.cwd(), \"posts\");\n\n// postFilePaths is the list of all mdx files inside the POSTS_PATH directory\nexport const postFilePaths = fs\n  .readdirSync(POSTS_PATH)\n  // Only include md(x) files\n  .filter((path) => /\\.mdx?$/.test(path));\n\nexport function getPostSlugs(): string[] {\n  return fs.readdirSync(POSTS_PATH);\n}\n\ntype PostItems = {\n  [key: string]: string;\n};\n\nexport function getPostBySlug(slug: string, fields: string[] = []): PostItems {\n  const realSlug = slug.replace(/\\.mdx$/, \"\");\n  const fullPath = join(POSTS_PATH, `${realSlug}.mdx`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const { data, content } = matter(fileContents);\n\n  const items: PostItems = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === \"slug\") {\n      items[field] = realSlug;\n    }\n    if (field === \"content\") {\n      items[field] = content;\n    }\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport function getAllPosts(fields: string[] = []): PostItems[] {\n  const slugs = getPostSlugs();\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by date in descending order\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n  return posts;\n}\n\nexport type PostHeading = {\n  id?: string;\n  content?: string;\n  link?: string;\n  level?: number;\n};\n\nexport function getHeadings(source: string): PostHeading[] {\n  //get all heading levels from markdown source, including #, ##, ###, etc.\n  const headings = source.match(/#+\\s(.*?)\\n/g);\n\n  //return array of objects with heading names and ids\n  return (\n    headings?.map((h, i) => {\n      const content = h.match(/#+\\s(.*?)\\n/)?.[1];\n      const type = headings?.[i].match(/#+/)?.[0];\n      const slug = content?.replace(/ /g, \"-\").toLowerCase();\n      const link = \"#\" + slug;\n      return {\n        id: slug || \"\",\n        content: content || \"\",\n        link: link || \"\",\n        level: type?.length || 0,\n      };\n    }) || []\n  );\n}\n", "import type { CompileOptions } from \"@mdx-js/mdx\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeCodeTitles from \"rehype-code-titles\";\nimport rehypePrism from \"rehype-prism-plus\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\ntype MDXConfig =\n  | Omit<CompileOptions, \"outputFormat\" | \"providerImportSource\">\n  | undefined;\n\nexport const mdxOptions: MDXConfig = {\n  remarkPlugins: [remarkGfm],\n  rehypePlugins: [\n    rehypeSlug,\n    rehypeCodeTitles,\n    rehypePrism,\n\n    [\n      rehypeAutolinkHeadings,\n      {\n        properties: {\n          className: [\"anchor\"],\n        },\n      },\n    ],\n  ],\n  format: \"mdx\",\n};\n"],
  "mappings": "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",
  "names": ["path"]
}
